/*
 * Test data for COBS encoding/decoding tests.
 */
#ifndef COBS_DATA_H
#define COBS_DATA_H

#include <stdint.h>

const uint8_t SHORT_DATA_NO_ZEROS[] = {
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
};

const uint8_t SHORT_DATA_NO_ZEROS_ENCODED[] = {
    0x09, 0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
//  ^
//  Added 0x09 byte since there are 8 bytes of data, and no other control bytes.
//  The last control byte (in this case the only one) is always equal to
//  remaining length + 1.
};

const uint8_t SHORT_DATA_ONE_ZERO[] = {
          0xAB, 0xCD, 0xEF, 0x12, 0x00, 0x56, 0x78, 0x90,
};

const uint8_t SHORT_DATA_ONE_ZERO_ENCODED[] = {
    0x05, 0xAB, 0xCD, 0xEF, 0x12, 0x04, 0x56, 0x78, 0x90,
//  ^                             ^
// 0x05 Byte added to beginning since the next control byte is 5 bytes away.
// 0x04 Byte replaced 0x00.  It's the last control byte, so its value is equal
// to remaining length + 1.
};

const uint8_t MEDIUM_DATA_SEVERAL_ZEROS[] = {
          0xAB, 0xCD, 0x00, 0x12, 0x00, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x05, 0x00, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x00, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x00, 0x56, 0x00, 0x00,
};

const uint8_t MEDIUM_DATA_SEVERAL_ZEROS_ENCODED[] = {
    0x03, 0xAB, 0xCD, 0x02, 0x12, 0x09, 0x56, 0x78, 0x90,
//  ^                 ^           ^
          0xAB, 0xCD, 0xEF, 0x12, 0x05, 0x07, 0x78, 0x90,
//                                      ^
          0xAB, 0xCD, 0xEF, 0x12, 0x08, 0x56, 0x78, 0x90,
//                                ^
          0xAB, 0xCD, 0xEF, 0x12, 0x02, 0x56, 0x01, 0x01,
//                                ^           ^     ^
};

const uint8_t LONG_DATA_NO_ZEROS[] = {
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78,
};

const uint8_t LONG_DATA_NO_ZEROS_ENCODED[] = {
    0xFF, 0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
//  ^
// Added 0xFF byte, since there are more than 254 bytes before the next zero.
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x02, 0x78,
//                                            ^
// Added 0x02 byte since there is one byte remaining, and last control byte is
// always remaining length + 1
};

const uint8_t EXTRA_LONG_DATA_NO_ZEROS[] = {
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, // 254 Bytes

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, // 508 Bytes
};

const uint8_t EXTRA_LONG_DATA_NO_ZEROS_ENCODED [] = {
    0xFF, 0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
//  ^
// No zeros for next 254 bytes, so first control byte is 0xFF
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0xFF,
//                                            ^
// Inserted overhead byte, since there were no zeros in the last 254 bytes.
// Value is 0xFF since there are no zeros in the next 254 bytes either.

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,

          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56, 0x78, 0x90,
          0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
};

const uint8_t INVALID_ENCODING[] = {
    0x04, 0xAB, 0xCD, 0xEF, 0x06, 0x07, 0x56, 0x78, 0x90,
//  ^                       ^
// First byte specifies the next control byte four positions later.  At that
// position, the value 0x06 says to expect the next one after 6 more bytes (or
// the end of the data), but the data ends after only 5 bytes, making the
// encoding invalid.
};

#endif
